    "use client";

    import { useEffect, useRef, useState } from "react";
    import { Editor } from "@tinymce/tinymce-react";
    import { saveAs } from "file-saver";
    import { Document, Paragraph, TextRun, Packer } from "docx";
    import parse from "html-react-parser";
    import { Editor as TinyMCEEditor } from "@tinymce/tinymce-react";
    import { Button, Box, Text } from "@chakra-ui/react";
    import { Avatar } from "@chakra-ui/react";
    import Image from "next/image";
    import { v4 as uuidv4 } from "uuid"; // ‚¨ÖÔ∏è arriba del archivo
    import { CKEditor } from '@ckeditor/ckeditor5-react';
    import ClassicEditor from '@ckeditor/ckeditor5-build-classic';


    // IMPORT del CSS Module (col√≥calo en la misma carpeta)
    import styles from "./loader.module.css";
import { SubCard } from "./SubCard";
import CKEditorWrapper from "./CKEditorWrapper";

    export default function HomePage() {
    // Entrada del usuario (consulta) y contenido generado por el modelo (documento)
    const [query, setQuery] = useState(""); // consulta del usuario
    const [docContent, setDocContent] = useState(""); // contenido generado por el modelo

    // Guarda el contenido final editado de cada subcard
    const [chapterContents, setChapterContents] = useState<Record<string, string>>({});

    const [loading, setLoading] = useState(false);
    const [updateMode, setUpdateMode] = useState<
        "replace" | "before" | "after" | "section"
    >("replace");
    const [editorInstance, setEditorInstance] = useState<any>(null);
    // Identifica cu√°l subcard est√° activa
    const [currentChapterKey, setCurrentChapterKey] = useState<string>("");
    const [isTyping, setIsTyping] = useState(false);
    const [typedChapters, setTypedChapters] = useState<string[]>([]);
    const [typingBuffer, setTypingBuffer] = useState("");
    const typingInterval = useRef<NodeJS.Timeout | null>(null); // ‚úÖ NUEVO: para guardar el intervalo activo
   type BotContent = {
    introduction: string;
    components: { title: string; detail: string }[];
    };

    type UserMessage = {
    id: string;                    // ‚úÖ nuevo
    role: "user";
    content: string;
    };

    type BotMessage = {
    id: string;                    // ‚úÖ nuevo
    role: "assistant";
    content: BotContent;
    };

    type Message = UserMessage | BotMessage; // ‚úÖ NUEVO
    const [messages, setMessages] = useState<Message[]>([]);

    const [disabledByMsg, setDisabledByMsg] = useState<Record<string, string[]>>({});

    // üü• Lista con t√≠tulos + contenido de los desactivados
    const disabledComponents = messages.flatMap((m) =>
    m.role === "assistant" && m.content?.components
        ? m.content.components.filter((c) =>
            (disabledByMsg[m.id] || []).includes(c.title)
        )
        : []
    );


    /* const handleChapterClick = (detail: string) => {
        // Usa tu misma funci√≥n de tipeo
        startTypingEffect(detail);
    }; */

    const startHtmlTypingEffect = (html: string) => {
        if (typingInterval.current) clearInterval(typingInterval.current);

        // 1. Tokenizamos en tags o texto
        const tokens = html.match(/<\/?[^>]+>|[^<]+/g) || [];

        let tokenIndex = 0;     // √≠ndice de token actual
        let charIndex  = 0;     // √≠ndice dentro del token
        let currentOutput = "";

        setIsTyping(true);
        setTypingBuffer("");

        const interval = setInterval(() => {
            if (tokenIndex >= tokens.length) {
            clearInterval(interval);
            typingInterval.current = null;
            setIsTyping(false);
            setDocContent(html);         // ‚úÖ Al final, HTML completo
            return;
            }

            const token = tokens[tokenIndex];

            if (token.startsWith("<")) {
            // üëâ Si es TAG, lo ponemos de golpe (no lo partimos)
            currentOutput += token;
            tokenIndex++;
            charIndex = 0;
            } else {
            // üëâ Si es TEXTO, lo vamos mostrando car√°cter a car√°cter
            currentOutput += token[charIndex];
            charIndex++;
            if (charIndex >= token.length) {
                tokenIndex++;
                charIndex = 0;
            }
            }

            setTypingBuffer(currentOutput);
        }, 2); // ‚ö° velocidad de tipeo (ms por paso)

        typingInterval.current = interval;
    };

    
    const handleChapterClick = (detail: string, title: string) => {
    // üîë Usamos el title como identificador √∫nico
    const chapterKey = title || detail.slice(0, 20); // fallback si no hay title
    setCurrentChapterKey(chapterKey);

    // Si ya guardamos edici√≥n previa -> mostrar eso (sin tipeo)
    if (chapterContents[chapterKey]) {
        setIsTyping(false);
        setTypingBuffer("");
        setDocContent(chapterContents[chapterKey]);
        return;
    }

    // Si ya se tipe√≥ antes -> mostrar HTML final directo
    if (typedChapters.includes(chapterKey)) {
        setIsTyping(false);
        setTypingBuffer("");
        setDocContent(detail);
        return;
    }

    // STOP cualquier tipeo previo
    if (typingInterval.current) {
        clearInterval(typingInterval.current);
        typingInterval.current = null;
    }

    // PREPARAR contenido plano para el tipeo (evitamos romper HTML)
    const fullHtml = detail || "";
    // Extraemos texto plano (eliminando tags) y normalizamos espacios
    const plainText = fullHtml.replace(/<[^>]+>/g, "").replace(/\s+/g, " ").trim();

    // Si no hay texto para tipear, asignamos HTML final directamente
    if (!plainText) {
        setDocContent(fullHtml);
        setChapterContents((prev) => ({ ...prev, [chapterKey]: fullHtml }));
        setTypedChapters((prev) => [...prev, chapterKey]);
        return;
    }

    // INICIAR tipeo sobre texto plano
    setIsTyping(true);
    setTypingBuffer("");
    setDocContent(""); // limpiar editor por seguridad
    setTypedChapters((prev) => [...prev, chapterKey]);

    startHtmlTypingEffect(detail); // üëà NUEVO: tipeo con formato
    };



    // Prompt fijo para el modelo (instruction)
    const instruction = `
    Act√∫a como un consultor experto en elaboraci√≥n de reportes de sostenibilidad y reportes integrados. Conoces en profundidad los est√°ndares de reporte IFRS S1 y S2, los est√°ndares SASB para la industria de alimentos y bebidas, y el proceso de elaboraci√≥n de reportes de empresas en Per√∫.

    Tu funci√≥n principal es redactar el cap√≠tulo de ‚ÄúGesti√≥n del cambio clim√°tico‚Äù para el reporte integrado de Alicorp 2024.

    Para ello, estoy anexando un JSON con la transcripci√≥n de una entrevista con el l√≠der de sostenibilidad de Alicorp sobre el desempe√±o 2024 y el cap√≠tulo del reporte integrado 2023.

    Sigue los siguientes pasos:

    Analiza la normativa y el reporte anterior:
    Estudia la estructura y requisitos de la norma IFRS S2 (Divulgaciones Financieras relacionadas con el Clima).
    Analiza la estructura del cap√≠tulo de ‚ÄúGesti√≥n del cambio clim√°tico‚Äù del reporte integrado de 2023, prestando especial atenci√≥n al estilo de redacci√≥n, el orden de los temas, y la tabla final de m√©tricas e indicadores alineados al est√°ndar SASB.
    Procesa la informaci√≥n del a√±o actual:
    Analiza a profundidad la entrevista de 2024 para extraer los datos cuantitativos, cualitativos y los logros clave del per√≠odo.
    Redacta el cap√≠tulo de Gesti√≥n del cambio clim√°tico 2024:
    Con base en tu conocimiento de IFRS S2 y el an√°lisis del reporte 2023, redacta el cap√≠tulo para el 2024, procesando e integrando la informaci√≥n clave de la entrevista.
    A continuaci√≥n, puntos adicionales muy importantes a tener en cuenta para la redacci√≥n:

    Estructura alineada a IFRS S2: Organiza el cap√≠tulo siguiendo una estructura clara que refleje los pilares de la norma: Gobernanza, Estrategia, Gesti√≥n de Riesgos, y M√©tricas y Objetivos. Aseg√∫rate de que la narrativa fluya l√≥gicamente, por ejemplo, que las iniciativas de gesti√≥n de energ√≠a se presenten como parte de la estrategia de mitigaci√≥n y no como un tema aislado.
    Tono y Estilo: Considera el mismo tono de voz y estilo de redacci√≥n del cap√≠tulo del 2023.
    Identificaci√≥n de Gaps de Informaci√≥n: Tu rol como consultor es clave. Identifica y se√±ala expl√≠citamente los vac√≠os de informaci√≥n necesarios para cumplir con IFRS S2 que no fueron cubiertos en la entrevista. Redacta los p√°rrafos o secciones correspondientes y deja espacios claramente marcados (ej: [DATO PENDIENTE: Describir el proceso de supervisi√≥n del Directorio sobre los riesgos clim√°ticos] o [COMPLETAR: Detalle de los principales riesgos de transici√≥n identificados y su impacto financiero estimado]). Esto es crucial para la secci√≥n de Gesti√≥n de Riesgos, donde se debe abordar el proceso de identificaci√≥n y los riesgos f√≠sicos y de transici√≥n.
    Resaltar Logros Clave (Highlights): En la parte narrativa del texto, define y destaca 2 o 3 "highlights" o logros principales de la gesti√≥n 2024, basados en los datos m√°s relevantes de la entrevista (ej: "Reducci√≥n de X% en emisiones de alcance 1 y 2").
    Uso de Tablas para M√©tricas: No incluyas tablas de datos en el cuerpo principal del texto. En su lugar, crea una secci√≥n al final del cap√≠tulo titulada "M√©tricas e Indicadores Clim√°ticos (SASB)". Replica la estructura de la tabla del reporte 2023 y pop√∫lala con los datos de 2024 disponibles en la entrevista. Si un dato para una m√©trica espec√≠fica de 2024 no est√° disponible, deja el espacio en blanco o marcado como "[DATO PENDIENTE]".
    Extensi√≥n: Considera una extensi√≥n similar a la del cap√≠tulo del reporte 2023.
    Dame el resultado en un texto con formato, que muestre t√≠tulos, textos en negritas y los espacios en blanco claramente identificados para ser completados posteriormente.

    Instrucciones importantes a considerar sobre la redacci√≥n:
    - Narrativo y estrat√©gico, similar a un informe de sostenibilidad de alta direcci√≥n.
    - P√°rrafos de 4‚Äì6 l√≠neas, con transiciones suaves.
    - Mezcla de an√°lisis (interpretaci√≥n de datos) y visi√≥n de futuro.
    - Uso de verbos de acci√≥n, por ejemplo: ‚Äúfortaleci√≥‚Äù, ‚Äúimplement√≥‚Äù, ‚Äúconsolid√≥‚Äù, etc. (puedes usar m√°s pero que compartan el mismo fin)
    - Mantener tono positivo pero realista; evitar lenguaje publicitario o t√©cnico en exceso.
    - Incluir subt√≠tulos o apartados tem√°ticos cuando sea natural.
    - No incluyas referencias a ‚Äúentrevista‚Äù o a los nombres de los documentos fuente.
    - Reescribe con tus propias palabras cada idea proveniente de la entrevista

    Devuelve la respuesta exclusivamente en HTML v√°lido y estructurado.
    Usa <h2> y <h3> para t√≠tulos y subt√≠tulos, <p> para p√°rrafos y <ul><li> o <ol><li> para listas con vi√±etas o numeraci√≥n.
    Utiliza <strong> para resaltar puntos clave.
    No incluyas etiquetas <html> ni <body>, solo el contenido.

    Importante: Cuando generes el reporte, el formato de respuesta que debes devolver ser√° un JSON. Ejemplo:
    {
        "introduction":"texto introductorio",
        "components": [
            {
                "title": "Secci√≥n 01",
                "detail": "detalle Secci√≥n 01"
            },
            {
                "title": "Secci√≥n 02",
                "detail": "detalle Secci√≥n 02"
            },
            {
                "title": "Secci√≥n N",
                "detail": "detalle Secci√≥n N"
            },
            ...
        ]
    }

    El campo introduction, seguir√° las siguientes reglas:
    IMPORTANTE:
    - El campo introduction **debe** describir expl√≠citamente la petici√≥n del usuario, 
    detallando el tipo de cambio, secci√≥n o formato solicitado.
    - No uses introducciones gen√©ricas. 
    - Aunque la petici√≥n sea peque√±a, el introduction debe reflejarla.
    Donde components tendr√° la cantidad de secciones del reporte, en caso se pida todo el reporte las secciones a considerar son las ya mencionadas previamente, en total 4: Gobernanza, Estrategia, Gesti√≥n de Riesgos, y M√©tricas y Objetivos (Considerar solo esas 4 opciones, no se puede tener otra secci√≥n en title)
    Y en caso no se pida todo el reporte solo una secci√≥n, considerar solo la secci√≥n mencionada.
    En el campo title debe contener el nombre de la secci√≥n, y en el campo detail, el contenido que se genera por esa secci√≥n, en formato HTML como ya se mencion√≥ previamete. 
    `;

    const startTypingEffect = (text: string) => {
    if (typingInterval.current) clearInterval(typingInterval.current);

    // Convertimos a texto plano para no romper HTML
    const plainText = (text || "").replace(/<[^>]+>/g, "").replace(/\s+/g, " ").trim();
    if (!plainText) {
        setDocContent(text);
        return;
    }

    setIsTyping(true);
    let i = 0;
    let buffer = "";

    const interval = setInterval(() => {
        if (i < plainText.length) {
        buffer += plainText[i];
        setTypingBuffer(`<p>${buffer}</p>`);
        i++;
        } else {
        clearInterval(interval);
        typingInterval.current = null;
        setIsTyping(false);
        setDocContent(text); // al final ponemos el HTML original (si lo hay)
        }
    }, 3);

    typingInterval.current = interval;
    };


    const applyInstructions = async () => {
        setLoading(true);
        try {
        // Si modo secci√≥n, comprobar selecci√≥n previa
        if (updateMode === "section") {
            if (!editorInstance) {
            alert("Editor no inicializado");
            setLoading(false);
            return;
            }
            const selectedText = editorInstance.selection.getContent({
            format: "text",
            });
            if (!selectedText || selectedText.trim() === "") {
            alert(
                "Debes seleccionar un texto antes de aplicar la opci√≥n 'Actualizar secci√≥n'"
            );
            setLoading(false);
            return;
            }
        }

        console.log("QUERY::  " + query);

        const res = await fetch("/api/apply", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
            content: query, // la consulta del usuario
            instruction, // prompt fijo
            }),
        });
        const data = await res.json();
        const output = data?.result || "";

        // Aplicar seg√∫n updateMode (mantengo la l√≥gica que ten√≠as)
        if (updateMode === "replace") {
            startTypingEffect(output);
        } else if (updateMode === "before") {
            // colocar respuesta antes del contenido existente
            const newDoc = output + (docContent || "");
            startTypingEffect(newDoc);
        } else if (updateMode === "after") {
            // colocar respuesta despu√©s del contenido existente
            const newDoc = (docContent || "") + output;
            startTypingEffect(newDoc);
        } else if (updateMode === "section") {
            // reemplazar la secci√≥n seleccionada en el documento
            const selectedHtml = editorInstance.selection.getContent({
            format: "html",
            });
            // reemplazamos la primera aparici√≥n de la selecci√≥n por la salida
            const newContent = docContent.replace(selectedHtml, output);
            startTypingEffect(newContent);
        }
        } catch (err) {
        console.error(err);
        alert("Error aplicando las instrucciones");
        } finally {
        setLoading(false);
        }
    };

    const handleDownload = () => {
        const children: TextRun[] = [];

        // üëâ 1. Unir SOLO los detalles (sin introduction)
        const fullHtml = messages
        .filter((m) => m.role === "assistant")
        .map((m) => {
            const c = m.content as BotContent;
            // üîë Solo concatenar los componentes (detalle)
            const comps = c.components
                .map((comp) => comp.detail)   // üëà SOLO detail, sin repetir t√≠tulos
                .join("<br/><br/>");
            return comps;
        })
        .join("<br/><br/>");

        // üëâ 2. Parsear el HTML combinado
        parse(fullHtml, {
            replace: (node: any) => {
                if (node.type === "tag") {
                    const style: any = {};

                    if (node.name === "strong" || node.name === "b") style.bold = true;
                    if (node.name === "em" || node.name === "i") style.italics = true;
                    if (node.name === "s" || node.name === "strike") style.strike = true;

                    // Si el contenido ya trae <h1>, <h2>, etc. lo respetamos
                    if (/^h[1-6]$/.test(node.name) && node.children?.[0]?.data) {
                        children.push(
                            new TextRun({
                                text: node.children[0].data,
                                bold: true,
                                size: 28,
                                break: 2,
                            })
                        );
                        return;
                    }

                    if (node.children && node.children[0]?.data) {
                        children.push(
                            new TextRun({
                                text: node.children[0].data,
                                ...style,
                            })
                        );
                    }
                } else if (node.type === "text") {
                    children.push(new TextRun({ text: node.data }));
                }
            },
        });

        // üëâ 3. Crear documento Word
        const doc = new Document({
            sections: [{ properties: {}, children: [new Paragraph({ children })] }],
        });

        // üëâ 4. Descargar
        Packer.toBlob(doc).then((blob) => saveAs(blob, "documento.docx"));
    };




    const handleSend = async () => {
        console.log("Subcards desactivados:", disabledComponents);
        if (!query.trim()) return;

        // üîπ 1. Limpiar el editor y el efecto de tipeo
        setDocContent("");       // ‚úÖ Limpia el contenido del editor
        setTypingBuffer("");     // ‚úÖ Limpia el buffer de escritura
        setIsTyping(false);      // ‚úÖ Por si hab√≠a un efecto de tipeo activo

         // 1Ô∏è‚É£ Filtrar t√≠tulos √∫nicos en disabledComponents
        const disabledTitles = Array.from(
            new Set(disabledComponents.map((c: { title: string }) => c.title))
        );

        // 2Ô∏è‚É£ Construir el texto extra SOLO si hay elementos
        const extraInstruction =
            disabledTitles.length > 0
            ? ` IMPORTANTE: no realices cambios sobre las siguientes secciones: ${disabledTitles.join(", ")}`
            : "";

        // 3Ô∏è‚É£ Concatenar a la query original
        const finalQuery = query + extraInstruction;

        // 1. agrega el mensaje del usuario a la izquierda
        setMessages((prev) => [
        ...prev,
        {
            id: uuidv4(),       // ‚úÖ identificador √∫nico
            role: "user",
            content: finalQuery
        }
        ]);

        // 2. llama a tu API
        setLoading(true);
        try {
            const res = await fetch("/api/apply", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                content: query,
                instruction,
            }),
            });
            const data = await res.json();
            const output = data?.result || "";

            // 3. agrega la respuesta como burbuja
            setMessages((prev) => [
            ...prev,
            {
                id: uuidv4(),                     // üîë ID √∫nico por interacci√≥n
                role: "assistant",
                content: output                    // output es el JSON { introduction, components }
            }
            ]);

            // 4. opcional: tambi√©n mandar el texto al editor
            startTypingEffect(output);
        } catch (err) {
            console.error(err);
        } finally {
            setLoading(false);
            setQuery(""); // limpia el textarea
        }
        };

        useEffect(() => {
        return () => {
        if (typingInterval.current) {
            clearInterval(typingInterval.current);
        }
        };
    }, []);


    return (
        <div className="flex h-screen">
        {/* OVERLAY: transparente + animaci√≥n; NO afecta layout porque es fixed */}
        {loading && (
            <div className={styles.loaderOverlay} role="status" aria-live="polite">
            <div className={styles.loaderWrapper}>
                <span className={styles.loader} />
                <div style={{ color: "#fff" }}>Generando respuesta...</div>
            </div>
            </div>
        )}

        {/* Panel izquierdo - Consulta (30%) */}
        <div className="w-[30%] border-r p-4 flex flex-col">
            <h2 className="text-xl font-bold mb-2">Conversaci√≥n</h2>

            {/* Textarea donde el usuario escribe su consulta (query) */}
            {/* <textarea
            className="w-full border rounded p-2 h-3/4"
            placeholder="Escribe aqu√≠ tu consulta..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            /> */}

            <div className="flex-1 overflow-y-auto px-4 space-y-4">
            {messages.map((m, i) => (
            <div
                key={i}
                className={`flex mb-6 ${m.role === "user" ? "justify-end" : "justify-start"}`}
            >
                {m.role === "assistant" && (
                <div className="w-8 h-8 mr-2 flex-shrink-0">
                    <Image
                    src="/bot-icon.png"
                    alt="Bot"
                    width={32}
                    height={32}
                    className="w-8 h-8 object-cover rounded-full"
                    />
                </div>
                )}

                <div
                className={`max-w-[80%] p-4 text-sm shadow-md
                    ${m.role === "user"
                    ? "bg-[#e4ebe4] rounded-2xl"
                    : "bg-white border border-gray-200 rounded-2xl"
                    }`}
                >
                {m.role === "user" && (
                    // ‚úÖ Usuario (sin cambios)
                    m.content
                )}

                {m.role === "assistant" && (
                    <>
                    {/* ‚úÖ Card 1: texto de introducci√≥n */}
                    <div className="mb-4 p-4 rounded-xl bg-gray-50 border">
                        <p className="text-gray-700">
                        {parse(m.content.introduction)}
                        </p>
                    </div>

                    {/* ‚úÖ Card 2: sub-cards generados din√°micamente */}
                    <div className="p-4 rounded-xl bg-gray-50 border">
                        <h3 className="font-semibold mb-3">
                        Crear m√≥dulos de reporte de sostenibilidad
                        </h3>

                        <div className="space-y-3">
                        <div className="space-y-3">
                        {m.content.components?.map((comp: any, idx: number) => (
                        <SubCard
                            key={`${m.id}-${idx}`}          // clave √∫nica por interacci√≥n
                            comp={comp}
                            onClick={handleChapterClick}
                            isDisabled={disabledByMsg[m.id]?.includes(comp.title) || false}
                            onToggle={() => {
                            setDisabledByMsg((prev) => {
                                const current = prev[m.id] || [];
                                return {
                                ...prev,
                                [m.id]: current.includes(comp.title)
                                    ? current.filter((t) => t !== comp.title)
                                    : [...current, comp.title]
                                };
                            });
                            }}
                        />
                        ))}

                        </div>


                        </div>
                    </div>
                    </>
                )}
                </div>
            </div>
            ))}



            </div>

            {/* 
            // üîá Radio buttons (comentados temporalmente)
            <div className="mt-4 flex flex-col space-y-2">
            <label>
                <input
                type="radio"
                value="replace"
                checked={updateMode === "replace"}
                onChange={() => setUpdateMode("replace")}
                />
                Reemplazar todo
            </label>
            <label>
                <input
                type="radio"
                value="before"
                checked={updateMode === "before"}
                onChange={() => setUpdateMode("before")}
                />
                Colocar antes
            </label>
            <label>
                <input
                type="radio"
                value="after"
                checked={updateMode === "after"}
                onChange={() => setUpdateMode("after")}
                />
                Colocar despu√©s
            </label>
            <label>
                <input
                type="radio"
                value="section"
                checked={updateMode === "section"}
                onChange={() => setUpdateMode("section")}
                />
                Actualizar secci√≥n (selecci√≥n)
            </label>
            </div>
            */}

            {/* <Button
                mt={4}
                colorScheme="blue"   // reemplaza bg/hover
                onClick={applyInstructions}
                isDisabled={loading || isTyping}
                isLoading={loading}   // ‚úÖ muestra spinner autom√°tico
                loadingText="Aplicando..."
                >
                {isTyping ? "Escribiendo..." : "Aplicar cambios"}
            </Button> */}
            
            <textarea
            className="w-full border rounded p-2 mb-2 resize-none"
            rows={3}
            placeholder="¬øQu√© contenido quieres generar?"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            />

            <Button
            colorScheme="blue"
            w="full"
            onClick={handleSend}
            isLoading={loading}
            loadingText="Enviando..."
            >
            Enviar
            </Button>
        </div>

        {/* Panel derecho - Documento (70%) */}
        <div className="w-[70%] p-4 flex flex-col h-full">  {/* h-full porque el padre es h-screen */}
        <h2 className="text-xl font-bold mb-2">Documento</h2>

        <div className="flex flex-col h-[calc(100vh-60px)]">   {/* IMPORTANTE: min-h-0 para que el hijo pueda hacer overflow interno */}
            <CKEditorWrapper
            data={isTyping ? typingBuffer : docContent}
            disabled={isTyping}
            className="h-full"   // hace que el wrapper ocupe todo el espacio disponible
            onChange={(html) => {
                setDocContent(html);
                setChapterContents((prev) => ({ ...prev, [currentChapterKey]: html }));
            }}
            />
        </div>

        <Button mt={2} colorScheme="green" px={4} py={2} borderRadius="md" onClick={handleDownload}>
            Descargar Word
        </Button>
        </div>
        </div>
    );
    }
